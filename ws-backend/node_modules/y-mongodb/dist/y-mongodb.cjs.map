{"version":3,"file":"y-mongodb.cjs","sources":["../src/mongo-adapter.js","../src/utils.js","../src/y-mongodb.js"],"sourcesContent":["import mongojs from 'mongojs'\nimport mongoist from 'mongoist'\n\nexport class MongoAdapter {\n  constructor (location, collection) {\n    this.location = location\n    this.collection = collection || 'yjs-writings'\n    this.db = null\n    this.open()\n  }\n\n  open () {\n    const mongojsDb = mongojs(this.location, [this.collection])\n    this.db = mongoist(mongojsDb)\n  }\n\n  get (query) {\n    return this.db[this.collection].findOne(query)\n  }\n\n  put (values) {\n    if (!values.docName && !values.version && !values.value) { throw new Error('Document and version must be provided') }\n\n    return this.db[this.collection].save(values)\n  }\n\n  del (query) {\n    const bulk = this.db[this.collection].initializeOrderedBulkOp()\n    bulk.find(query).remove()\n    return bulk.execute()\n  }\n\n  readAsCursor (query, opts = {}) {\n    let curs = this.db[this.collection].findAsCursor(query)\n    if (opts.reverse) curs = curs.sort({ clock: -1 })\n    if (opts.limit) curs = curs.limit(opts.limit)\n    return curs.toArray()\n  }\n\n  close () {\n    this.db.close()\n  }\n\n  async flush () {\n    await this.db.dropDatabase()\n    await this.db.close()\n  }\n}\n","import * as Y from 'yjs'\nimport * as binary from 'lib0/binary.js'\nimport * as encoding from 'lib0/encoding.js'\nimport { Buffer } from 'buffer'\n\nexport const PREFERRED_TRIM_SIZE = 400\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {number} from Greater than or equal\n * @param {number} to lower than (not equal)\n * @return {Promise<void>}\n */\nexport const clearUpdatesRange = async (db, docName, from, to) => db.del({\n  docName,\n  clock: {\n    $gte: from,\n    $lt: to\n  }\n})\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} stateAsUpdate\n * @param {Uint8Array} stateVector\n * @return {Promise<number>} returns the clock of the flushed doc\n */\nexport const flushDocument = async (db, docName, stateAsUpdate, stateVector) => {\n  const clock = await storeUpdate(db, docName, stateAsUpdate)\n  await writeStateVector(db, docName, stateVector, clock)\n  await clearUpdatesRange(db, docName, 0, clock)\n  return clock\n}\n\n/**\n * Create a unique key for a update message.\n * @param {string} docName\n * @param {number} clock must be unique\n * @return {Object} [opts.version, opts.docName, opts.action, opts.clock]\n */\nexport const createDocumentUpdateKey = (docName, clock) => ({\n  version: 'v1',\n  action: 'update',\n  docName,\n  clock\n})\n\n/**\n * @param {string} docName\n * @return {Object} [opts.docName, opts.version]\n */\nexport const createDocumentStateVectorKey = docName => {\n  return {\n    docName: docName,\n    version: 'v1_sv'\n  }\n}\n\n/**\n * Level expects a Buffer, but in Yjs we typically work with Uint8Arrays.\n *\n * Since Level thinks that these are two entirely different things,\n * we transform the Uint8array to a Buffer before storing it.\n *\n * @param {any} db\n * @param {Object} values\n */\nexport const mongoPut = async (db, values) => db.put(values)\n\n/**\n * @param {any} db\n * @param {object} query\n * @param {object} opts\n * @return {Promise<Array<any>>}\n */\nexport const getMongoBulkData = (db, query, opts) => db.readAsCursor(query, opts)\n\n/**\n * @param {any} db\n * @return {Promise<any>}\n */\nexport const flushDB = db => db.flush()\n\n/**\n * Get all document updates for a specific document.\n *\n * @param {any} db\n * @param {string} docName\n * @param {any} [opts]\n * @return {Promise<Array<Object>>}\n */\nexport const getMongoUpdates = async (db, docName, opts = {}) => getMongoBulkData(db, {\n  ...createDocumentUpdateKey(docName, 0),\n  clock: {\n    $gte: 0,\n    $lt: binary.BITS32\n  }\n},\nopts\n)\n\n/**\n * @param {any} db\n * @param {string} docName\n * @return {Promise<number>} Returns -1 if this document doesn't exist yet\n */\nexport const getCurrentUpdateClock = (db, docName) => getMongoUpdates(db, docName, {\n  reverse: true,\n  limit: 1\n}).then(updates => {\n  if (updates.length === 0) {\n    return -1\n  } else {\n    return updates[0].clock\n  }\n})\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} sv state vector\n * @param {number} clock current clock of the document so we can determine when this statevector was created\n */\nexport const writeStateVector = async (db, docName, sv, clock) => {\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint8Array(encoder, sv)\n  await mongoPut(db, {\n    ...createDocumentStateVectorKey(docName),\n    value: Buffer.from(encoding.toUint8Array(encoder)),\n    clock\n  })\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} update\n * @return {Promise<number>} Returns the clock of the stored update\n */\nexport const storeUpdate = async (db, docName, update) => {\n  const clock = await getCurrentUpdateClock(db, docName)\n  if (clock === -1) {\n    const ydoc = new Y.Doc()\n    Y.applyUpdate(ydoc, update)\n    const sv = Y.encodeStateVector(ydoc)\n    await writeStateVector(db, docName, sv, 0)\n  }\n\n  await mongoPut(db, {\n    ...createDocumentUpdateKey(docName, clock + 1),\n    value: Buffer.from(update)\n  })\n\n  return clock + 1\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {{update:Uint8Array, sv: Uint8Array}}\n */\nexport const mergeUpdates = (updates) => {\n  const ydoc = new Y.Doc()\n  ydoc.transact(() => {\n    for (let i = 0; i < updates.length; i++) {\n      Y.applyUpdate(ydoc, updates[i])\n    }\n  })\n  return { update: Y.encodeStateAsUpdate(ydoc), sv: Y.encodeStateVector(ydoc) }\n}\n","import * as Y from 'yjs'\nimport * as binary from 'lib0/binary.js'\nimport * as promise from 'lib0/promise.js'\n//\nimport { MongoAdapter } from './mongo-adapter'\nimport * as U from './utils'\n\nconst getUpdates = docs => {\n  if (!Array.isArray(docs) || !docs.length) return []\n\n  return docs.map(update => update.value.buffer)\n}\n\nexport class MongodbPersistence {\n  /**\n   * @param {string} location\n   * @param {string} [collection]\n   */\n  constructor (location, collection) {\n    const db = new MongoAdapter(location, collection)\n    this.tr = promise.resolve()\n\n    this._transact = f => {\n      const currTr = this.tr\n      this.tr = (async () => {\n        await currTr\n        let res = /** @type {any} */ (null)\n        try {\n          res = await f(db)\n        } catch (err) {\n          console.warn('Error during saving transaction', err)\n        }\n        return res\n      })()\n      return this.tr\n    }\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<Y.Doc>}\n   */\n  getYDoc (docName) {\n    return this._transact(async db => {\n      const docs = await U.getMongoUpdates(db, docName)\n      const updates = getUpdates(docs)\n      const ydoc = new Y.Doc()\n      ydoc.transact(() => {\n        for (let i = 0; i < updates.length; i++) {\n          Y.applyUpdate(ydoc, updates[i])\n        }\n      })\n      if (updates.length > U.PREFERRED_TRIM_SIZE) {\n        await U.flushDocument(db, docName, Y.encodeStateAsUpdate(ydoc), Y.encodeStateVector(ydoc))\n      }\n      return ydoc\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @param {Uint8Array} update\n   * @return {Promise<number>} Returns the clock of the stored update\n   */\n  storeUpdate (docName, update) {\n    return this._transact(db => U.storeUpdate(db, docName, update))\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<void>}\n   */\n  clearDocument (docName) {\n    return this._transact(async db => {\n      await db.del(U.createDocumentStateVectorKey(docName))\n      await U.clearUpdatesRange(db, docName, 0, binary.BITS32)\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<void>}\n   */\n  flushDocument (docName) {\n    return this._transact(async db => {\n      const docs = await U.getMongoUpdates(db, docName)\n      const updates = getUpdates(docs)\n      const { update, sv } = U.mergeUpdates(updates)\n      await U.flushDocument(db, docName, update, sv)\n    })\n  }\n\n  flushDB () {\n    return this._transact(async db => {\n      await U.flushDB(db)\n    })\n  }\n}\n"],"names":["binary.BITS32","encoding.createEncoder","encoding.writeVarUint8Array","Buffer","encoding.toUint8Array","Y.Doc","Y.applyUpdate","Y.encodeStateVector","Y.encodeStateAsUpdate","promise.resolve","U.getMongoUpdates","U.PREFERRED_TRIM_SIZE","U.flushDocument","U.storeUpdate","U.createDocumentStateVectorKey","U.clearUpdatesRange","U.mergeUpdates","U.flushDB"],"mappings":"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"}